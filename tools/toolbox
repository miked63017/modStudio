#!/bin/bash

export BASEDIR=`pwd`

export PATH=$BASEDIR/tools:$BASEDIR/tools/apktool:$PATH
export SMALI=$BASEDIR/tools/smali.jar
export BAKSMALI=$BASEDIR/tools/baksmali.jar
export APILEVEL=19
export FRAMEWORK=$BASEDIR/source/system/framework
export APKTOOL=$BASEDIR/tools/apktool/apktool


function deodex ()
{
    [ -d $BASEDIR/working ] || mkdir $BASEDIR/working
    basename=$(echo $1 | awk -F\. '{print $1}')
    echo $basename
    odexfile=$(find $BASEDIR/source -name $basename.odex)
    odexfile=$(echo $odexfile | sed "s#\s##g")

    
    echo $odexfile
    playfile=$(find $BASEDIR/source -name $1)
    echo $playfile
    playpath=$(echo $playfile | sed "s#$BASEDIR/source/##g" | awk -F\/ 'sub(FS $NF,x)')
    echo $playpath
    playfilename=$(echo $playfile | awk -F\/ '{print $NF}')
    echo $playfilename
    [ -d $BASEDIR/playground/$playpath ] || mkdir -p $BASEDIR/playground/$playpath
    cp $playfile $BASEDIR/playground/$playpath/
    if [ -n "$odexfile" ] 
    then
      echo "Found odex file"
    else
      echo "File already seems to be deodexed, adding to playground"
      return 0
    fi
    cp $odexfile $BASEDIR/playground/$playpath/
    playodex=$(echo $odexfile | sed "s#$BASEDIR/source/#$BASEDIR/playground/#g")
    
    WORKING="$BASEDIR/working"
    java_cmd="java -Xmx512m -jar $BAKSMALI -a $APILEVEL -d $FRAMEWORK -x $playodex -o $WORKING"
    echo $java_cmd
    $java_cmd
    is_error=$?
    if [ "$is_error" == "0" ] && [ -d $WORKING ]
    then
      echo "Assembling into classes.dex ..."
      java_cmd="java -Xmx512m -jar $SMALI -a $APILEVEL -o classes.dex $WORKING"
      echo $java_cmd
      $java_cmd
      rm -rf $WORKING
      if [ -e classes.dex ]
      then
        newbasename=`echo $playodex | sed 's/.odex//'`
        main_file=$newbasename.apk
        error_found=no
        if [ -e $main_file ]
        then
          echo "Found $main_file"
          ext=apk
        else
          main_file=$newbasename.jar
          
          if [ -e $main_file ]
          then
            echo "Found $main_file"
            ext=jar
          else          
            echo "ERROR: Can't find $newbasename.jar or $newbasename.apk"
            error_found=yes
          fi
        fi
        if [ $error_found == yes ]
        then
          echo "Removing classes.dex ..."
          rm -f classes.dex
        else
          echo "Put classes.dex into $main_file ..."
          zip -r -q $main_file classes.dex
          rm -f classes.dex
          if [ -e $main_file ]
          then
            echo "$main_file has been deodexed"
            rm $BASEDIR/playground/$playpath/$basename.odex
          fi
          return 0
        fi
      else
        echo "WARNING: Unable to produce classes.dex!"
        return 1
      fi          
    else
      rm -rf $WORKING
      return 1
    fi

}

function setupPlayground ()
{
  [ -d $BASEDIR/playground ] || mkdir $BASEDIR/playground
  [ -d $BASEDIR/source ] || (echo "Please setup source dir first" && return 1)
}

function playWith ()
{
  [ -d $BASEDIR/playground ] || mkdir $BASEDIR/playground
  basename=$(echo $1 | awk -F\. '{print $1}')
  echo $basename
  odexfile=$(find $BASEDIR/source -name $basename.odex)
  echo $odexfile
  playfile=$(find $BASEDIR/source -name $1)
  echo $playfile
  playpath=$(echo $playfile | sed "s#$BASEDIR/source/##g" | awk -F\/ 'sub(FS $NF,x)')
  echo $playpath
  playfilename=$(echo $playfile | awk -F\/ '{print $NF}')
  echo $playfilename
  mkdir -p $BASEDIR/playground/$playpath
  cp $playfile $BASEDIR/playground/$playpath/
  cp $odexfile $BASEDIR/playground/$playpath/
}

function cleanPlayGround ()
{
  [ -d $BASEDIR/playground ] && rm -rfv $BASEDIR/playground 
}

function pullSystemFromPhone ()
{
    
    [ -d $BASEDIR/source ] || mkdir $BASEDIR/source
    adb shell mkdir /mnt/sdcard/tmpModStudio/;
    
    if [ "$1" == 'all' ]; then
      for i in `adb shell su -c find /system -type f`;do
          realOut=$(echo $i | sed "s#\s##g")
          echo "Grabbing $realOut";
          thefile=$(echo $realOut | awk -F\/ '{print $NF}');
          echo "adb shell su -c cp $realOut /mnt/sdcard/tmpModStudio/$thefile";
          adb shell su -c cp $realOut /mnt/sdcard/tmpModStudio/$thefile;
          thepath=$(echo $realOut | awk -F\/ 'sub(FS $NF,x)');
          mkdir -p $BASEDIR/source/$thepath
          echo "adb pull /mnt/sdcard/tmpModStudio/$thefile $BASEDIR/source/$thepath/"
          adb pull /mnt/sdcard/tmpModStudio/$thefile $BASEDIR/source/$thepath/
          adb shell rm /mnt/sdcard/tmpModStudio/$thefile
      done;
    else
      for i in `adb shell su -c find /system -iname "*.apk" -o -iname "*.jar" -o -iname "*.odex"`;do
          realOut=$(echo $i | sed "s#\s##g")
          echo "Grabbing $realOut";
          thefile=$(echo $realOut | awk -F\/ '{print $NF}');
          echo "adb shell su -c cp $realOut /mnt/sdcard/tmpModStudio/$thefile";
          adb shell su -c cp $realOut /mnt/sdcard/tmpModStudio/$thefile;
          thepath=$(echo $realOut | awk -F\/ 'sub(FS $NF,x)');
          mkdir -p $BASEDIR/source/$thepath
          echo "adb pull /mnt/sdcard/tmpModStudio/$thefile $BASEDIR/source/$thepath/"
          adb pull /mnt/sdcard/tmpModStudio/$thefile $BASEDIR/source/$thepath/
          adb shell rm /mnt/sdcard/tmpModStudio/$thefile
      done;
    fi;
      
      
    adb shell rm -rf /mnt/sdcard/tmpModStudio
    #rm -rf $BASEDIR/sourceTest
}

function pullSystemFromROM ()
{
    ROM=$1
    cwd=`pwd`
    [ -d $BASEDIR/source ] || mkdir $BASEDIR/source
    [ -f $ROM ] || (echo "Can't locate the ROM file specified" && return 1)
    [ -d $BASEDIR/working ] || mkdir $BASEDIR/working
    cp $ROM $BASEDIR/working/
    cd $BASEDIR/working/
    tempROM=$(find . -iname "*.zip")
    echo "Unzipping ROM, this may take a few minutes."
    unzip $tempROM 
    echo "Done, creating file list now."
    if [ "$2" == 'all' ];then
      for i in `find $BASEDIR/working/system/ -type f`;do
          thefile=$(echo $i | awk -F\/ '{print $NF}');
          thepath=$(echo $i | awk -F\/ 'sub(FS $NF,x)' | sed "s#$BASEDIR/working/##g");
          mkdir -p $BASEDIR/source/$thepath
          echo "cp $i $BASEDIR/source/$thepath/"
          cp "$i" $BASEDIR/source/$thepath/
      done;
    else
      for i in `find $BASEDIR/working/system/ -iname "*.apk" -o -iname "*.jar" -o -iname "*.odex"`;do
          thefile=$(echo $i | awk -F\/ '{print $NF}');
          thepath=$(echo $i | awk -F\/ 'sub(FS $NF,x)' | sed "s#$BASEDIR/working/##g");
          mkdir -p $BASEDIR/source/$thepath
          echo "cp $i $BASEDIR/source/$thepath/"
          cp "$i" $BASEDIR/source/$thepath/
      done;
    fi;
    cd $cwd
    rm -rf $BASEDIR/working
}

function pullSystemFromIMG ()
{
    IMG=$1
    cwd=`pwd`
    [ -d $BASEDIR/source ] || mkdir $BASEDIR/source
    [ -f $IMG ] || (echo "Can't locate the IMG file specified" && return 1)
    [ -d $BASEDIR/working ] || mkdir $BASEDIR/working
    echo "Making working copy of IMG and figuring out IMG type, this may take a few minutes."
    cp $IMG $BASEDIR/working/
    cd $BASEDIR/working/
    tempIMG=$(find . -iname "*.img*")
    
    [ -d $BASEDIR/working/mount ] || mkdir $BASEDIR/working/mount
    echo "Need sudo to mount the image"
    sudo mount -o loop $tempIMG $BASEDIR/working/mount
    if [ $? -ne 0 ]; then
      $BASEDIR/tools/ext4_utils_r4.3/simg2img $tempIMG $tempIMG.raw
      sudo mount -o loop $tempIMG.raw $BASEDIR/working/mount
      if [ $? -ne 0 ]; then
        echo "Cannot work with the provided IMG"
        return 1
      fi
    fi
    mkdir -p $BASEDIR/source/system/
    if [ "$2" == 'all' ];then
      
      cp -arvf $BASEDIR/working/mount/* $BASEDIR/source/system/
    else
      echo "Done, creating file list now."
      for i in `find $BASEDIR/working/mount/ -iname "*.apk" -o -iname "*.jar" -o -iname "*.odex"`;do
          thefile=$(echo $i | awk -F\/ '{print $NF}');
          thepath=$(echo $i | awk -F\/ 'sub(FS $NF,x)' | sed "s#$BASEDIR/working/mount/##g");
          echo "mkdir -p $BASEDIR/source/system/$thepath"
          mkdir -p $BASEDIR/source/system/$thepath
          echo "cp $i $BASEDIR/source/system/$thepath/"
          cp "$i" $BASEDIR/source/system/$thepath/
      done;
    fi
    cd $cwd
    sudo umount $BASEDIR/working/mount
    rm -rf $BASEDIR/working
}

function cleanSource()
{
  [ -d $BASEDIR/source ] && rm -rfv $BASEDIR/source
}

function buildMod ()
{
  echo "Feature coming soon"
  DECOMPILEDFILEMOD=$(find $BASEDIR/playground -iname "$1.out")
  DECOMPILEDFILEORIG=$(find $BASEDIR/.origcode -iname "$1.out")
  diff -ur $DECOMPILEDFILEORIG $DECOMPILEDFILEMOD > $DECOMPILEDFILEORIG/../$1.patch
}

function buildFlashable ()
{
  echo "Feature coming soon"
  dirs=$(find $BASEDIR/playground -type d)

  #copy everything to working dir
  
  #insert dexopt-wrapper if self odexing
  
  
#cat <<EOF > /etc/Advance-info/firstboot.sh
  cat << EOF
ui_print("*********************************************");  
ui_print("This flashable zip made possible by modStudio");  
ui_print("*********************************************");  

unmount("/system"); 
ui_print("Mounting System"); 
run_program("/sbin/mount", "-t", "auto", "/system"); 

unmount("/data"); 
ui_print("Mounting Data"); 
run_program("/sbin/mount", "-t", "auto", "/data");

ui_print("Extracting all the systems"); 
package_extract_dir("system", "/system"); 

ui_print("Setting permissions on sqlite3"); 
set_perm(0, 0, 0777, "/system/xbin/sqlite3"); 

ui_print("Executing unlockHotspot"); 
package_extract_file("tmp/unlockHotspot", "/data/local/tmp/unlockHotspot.sh"); 
set_perm(0, 0, 0777, "/data/local//tmp/unlockHotspot.sh");  
run_program("/data/local//tmp/unlockHotspot.sh"); 

 
ui_print("******************************************"); 
ui_print("        Successfully Installed"); 
ui_print("******************************************"); 
set_progress(1.0); 
EOF
}

function odex ()
{
echo odex
  export BOOTCLASSPATH=$(adb shell su -c grep BOOTCLASSPATH init* -h | grep -v "#" | awk -F\  '{print $3}' | sed "s#\s##g")
  
  adb shell su -c mount -o remount,rw /system
  adb push $BASEDIR/tools/dexopt-wrapper /data/local/tmp/
  adb shell su -c dd if=/data/local/tmp/dexopt-wrapper of=/system/bin/dexopt-wrapper
  adb shell su -c chmod 777 /system/bin/dexopt-wrapper
  adb shell mkdir /mnt/sdcard/tmpModStudio/
  
  ODEXTARGET=$(find $BASEDIR/playground -iname "$1")
  TARGETPATH=$(find $BASEDIR/playground -iname "$1" | sed "s#$1##g")
  adb push $ODEXTARGET /mnt/sdcard/tmpModStudio/
  basename=$(echo $1 | awk -F\. '{print $1}' | sed "s#$BASEDIR/playground##g")

  phoneodex=$(adb shell su -c find /system -iname "$basename.odex" | sed "s#\s##g")

  adb shell su -c cp $phoneodex /mnt/sdcard/tmpModStudio/$basename.original.odex
  adb shell su -c dexopt-wrapper /mnt/sdcard/tmpModStudio/$1 /mnt/sdcard/tmpModStudio/$basename.odex $BOOTCLASSPATH
  adb shell su -c dd if=/mnt/sdcard/tmpModStudio/$basename.original.odex of=/mnt/sdcard/tmpModStudio/$basename.odex bs=1 count=20 skip=52 seek=52 conv=notrunc
  
  adb pull /mnt/sdcard/tmpModStudio/$basename.odex $TARGETPATH
  adb pull /mnt/sdcard/tmpModStudio/$1 $TARGETPATH
  adb shell su -c rm -rf /mnt/sdcard/tmpModStudio
}

function build ()
{
  echo "$1"
  echo "find $BASEDIR/playground -iname \"$1\""
  ORIGINALFILE=$(find $BASEDIR/playground -iname "$1")
  echo "Original file is $ORIGINALFILE"
  FILETOBUILD=$(find $BASEDIR/playground -iname "$1.out")
  echo "Output file is $FILETOBUILD"
  echo "cp $ORIGINALFILE $ORIGINALFILE.original"
  cp $ORIGINALFILE $ORIGINALFILE.original
  echo "$APKTOOL b -f -t modStudio $FILETOBUILD -o $ORIGINALFILE"
  $APKTOOL b -c -f -t modStudio $FILETOBUILD -o $ORIGINALFILE
  [ -d $BASEDIR/.modcode ] || mkdir $BASEDIR/.modcode
  mv $FILETOBUILD $BASEDIR/.modcode/
}

function decompile ()
{
  echo "Searching for framework files in $BASEDIR/source"
  for i in `find $BASEDIR/source -iname "*.apk" -o -iname "*.jar"`;
    do
    $APKTOOL if $i -t modStudio >> /dev/null 2>&1;
    done;
  FILETODECOMPILE=$(find $BASEDIR/playground -iname "$1")
  echo "Decompiling $FILETODECOMPILE"
  $APKTOOL d -f -t modStudio $FILETODECOMPILE -o $FILETODECOMPILE.out
  [ -d $BASEDIR/.origcode ] || mkdir $BASEDIR/.origcode
  cp -arf $FILETODECOMPILE.out $BASEDIR/.origcode/
}


function installFromPlayground ()
{
echo "Install from playground"
  adb shell su -c mount -o remount,rw /system
  adb shell mkdir /mnt/sdcard/tmpModStudio/
  adb shell mkdir /mnt/sdcard/ModStudioBackups/
  find $BASEDIR/playground -iname "*.origignal*" -exec rm -f {} \;
  for i in `find $BASEDIR/playground -type f`;do
    echo $i
    thepath=$(echo $i | awk -F\/ 'sub(FS $NF,x)' | sed "s#$BASEDIR/playground/##g")
    echo $thepath
    thefile=$(echo $i | awk -F\/ '{print $NF}')
    echo $thefile
    
    adb push $i /mnt/sdcard/tmpModStudio/
    echo "Backing up /$thepath/$thefile in /mnt/sdcard/ModStudioBackups/"
    adb shell su -c cp /$thepath/$thefile /mnt/sdcard/ModStudioBackups/
    echo "Copying: $i"
    echo "To: /$thepath/$thefile"
    adb shell su -c dd if=/mnt/sdcard/tmpModStudio/$thefile of=/$thepath/$thefile
    adb shell su -c rm /mnt/sdcard/tmpModStudio/$thefile

  done;
  adb shell su -c rm -rf /mnt/sdcard/tmpModStudio
  echo "Rebooting your phone"
  adb reboot
}